import com.github.jk1.license.render.*

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://repository.activeeon.com/content/groups/proactive/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    configurations.maybeCreate("pitest")

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.22.RELEASE'
        classpath 'com.diffplug.gradle.spotless:spotless:2.4.0'
        classpath 'org.ow2.proactive:coding-rules:1.0.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.5.0'
        classpath "io.spring.gradle:dependency-management-plugin:1.0.15.RELEASE"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1"
    classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0"
        classpath 'com.github.jk1:gradle-license-report:1.7'
    }

    dependencies {
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
        pitest 'eu.stamp-project:descartes:1.2.4'
    }
}

apply plugin: 'project-report'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.github.kt3k.coveralls'
apply from: "$rootDir/gradle/ext/coding-format.gradle"
apply plugin: "io.spring.dependency-management"
apply plugin: 'antlr'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'org.sonarqube'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'com.github.jk1.dependency-license-report'

pitest {
    pitestVersion = "1.4.0"
    targetClasses = ['org.ow2.proactive.catalog.*']
    threads = 2
    outputFormats = ['XML', 'HTML', 'METHODS','ISSUES']
    timestampedReports = false
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    mutationEngine = "descartes"
}

group = 'org.ow2.proactive'

bootRepackage {
    enabled = false
}

configurations {
    // The following module is excluded to avoid clashes when embedded inside the ProActive Scheduler
    all*.exclude module: 'spring-boot-starter-logging'

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    querydsl

    jacksonCoreLibs
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

ext {
    generatedSrcDir = "$projectDir/src/generated/java"
}

generateGrammarSource {
    arguments += ["-visitor", "-long-messages"]
    maxHeapSize = "64m"
    outputDirectory = file("$generatedSrcDir/org/ow2/proactive/catalog/rest/query/parser")
}

licenseReport {
    configurations = ['runtime']
    renderers = [new InventoryHtmlReportRenderer()]
}

repositories {

    if (project.hasProperty('local')) {
        mavenLocal()
    }

    mavenCentral()
    maven {
        url "http://repository.activeeon.com/content/groups/proactive/"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                authentication(userName: "${System.getProperty('nexusUsername')}",
                        password: "${System.getProperty('nexusPassword')}")
            }
            repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                authentication(userName: "${System.getProperty('nexusUsername')}",
                        password: "${System.getProperty('nexusPassword')}")
            }
        }
    }
}

sourceSets {
    generated {
        java {
            srcDirs += generatedSrcDir
        }
    }

    main {
        java {
            srcDirs += generatedSrcDir
        }
    }

    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')

        compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}

springBoot {
    mainClass = 'org.ow2.proactive.catalog.Application'
}

war {
    baseName = "catalog"
    version = version
    classpath configurations.jacksonCoreLibs
}

dependencyManagement {
    imports {
        mavenBom "org.ow2.proactive:parent-bom:${version}"
    }
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {
    antlr 'org.antlr:antlr4:4.7.2'

    compile 'org.apache.tika:tika-core:1.28.5'

    compile 'commons-fileupload:commons-fileupload'
    compile 'org.apache.commons:commons-lang3'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.fasterxml.jackson.core:jackson-core'
    compile 'com.fasterxml.jackson.core:jackson-annotations'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-base'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider'
    compile 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor'
    compile 'jakarta.activation:jakarta.activation-api'

    compile 'com.querydsl:querydsl-jpa:4.1.4'

    jacksonCoreLibs 'com.fasterxml.jackson.core:jackson-databind'
    jacksonCoreLibs 'com.fasterxml.jackson.core:jackson-core'
    jacksonCoreLibs 'com.fasterxml.jackson.core:jackson-annotations'
    jacksonCoreLibs 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor'

    querydsl 'com.querydsl:querydsl-apt:4.1.4'

    /*
        Spring boot 1.3.X relies on hibernate 4 which is not compatible
        with the version that is used with Scheduling project
     */
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.5.22.RELEASE'

    compile('org.hibernate:hibernate-entitymanager')
    compile('org.hibernate:hibernate-core')
    compile('javax.validation:validation-api:1.1.0.Final')

    compile 'org.springframework.boot:spring-boot-starter-log4j2:1.5.22.RELEASE'
    compile ('org.springframework.boot:spring-boot-starter-web:1.5.22.RELEASE')
    compile ('org.springframework.boot:spring-boot-starter-validation:1.5.22.RELEASE')

    compile group: 'org.jasypt', name: 'jasypt', version: '1.9.3'
    // when upgrading the following library version, make sure the default encryption settings did not change
    // see scheduling/PropertyDecrypter.java for default settings
    compile group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot', version: '1.9'

    //logger
    compile "org.apache.logging.log4j:log4j-web"

    compile 'org.springframework.hateoas:spring-hateoas'

    compile 'org.eclipse.jetty:jetty-servlets'

    providedCompile 'org.springframework.boot:spring-boot-starter-tomcat:1.5.22.RELEASE'

    providedRuntime 'org.hsqldb:hsqldb:2.7.2:jdk8'

    compile 'org.springdoc:springdoc-openapi-ui:1.7.0'

    compile 'com.graphql-java:graphql-java:17.6'
    compile 'com.graphql-java:graphql-java-extended-scalars:17.1'
    compile 'org.projectlombok:lombok'

    //dependencies for call graph
    compile group: 'org.jgrapht', name: 'jgrapht-core', version: '1.3.0'
    compile group: 'org.jgrapht', name: 'jgrapht-ext', version: '1.3.0'


    compile 'org.zeroturnaround:zt-zip'

    compile 'com.github.ben-manes.caffeine:caffeine'

    compile 'org.jsoup:jsoup:1.15.4'

    // library to build pdf reports
    compile 'com.github.dhorions:boxable:1.7.0'

    compile "org.ow2.proactive:microservices-common:$version"

    //support for Oracle DB version 12.1.0.2
    //testCompile group: 'com.oracle', name: 'ojdbc7', version: '12.1.0.2'

    //support for MySQL DB
    testCompile group: 'mysql', name: 'mysql-connector-java', version: '8.0.13'

    //support for PostgreSQL DB
    testCompile group: 'org.postgresql', name: 'postgresql', version: '42.0.0'

    //support for SqlServer DB
    testCompile group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '7.1.2.jre8-preview'

    //  Using the Scheduler Rest client as authentication service
    compile ("org.ow2.proactive_grid_cloud_portal:rest-client:$version") {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.slf4j', module: 'slf4j-reload4j'
        exclude group: 'log4j', module: 'log4j'
        exclude group: 'ch.qos.reload4j', module: 'reload4j'
    }

    // scheduler-api for parsing workflows
    compile ("org.ow2.proactive:scheduler-api:$version") {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.slf4j', module: 'slf4j-reload4j'
        exclude group: 'log4j', module: 'log4j'
        exclude group: 'ch.qos.reload4j', module: 'reload4j'
    }

    // custom hibernate-hikaricp version to use HikariCP 4.0
    runtime('org.hibernate:hibernate-hikaricp') {
        exclude group: 'org.javassist', module: 'javassist'
    }

    testCompile 'com.google.truth:truth'
    testCompile 'junit:junit'
    testCompile 'nl.jqno.equalsverifier:equalsverifier'
    testCompile 'org.mockito:mockito-core'
    testRuntime 'ch.qos.reload4j:reload4j:1.2.25'

    integrationTestCompile 'com.google.code.gson:gson'
    integrationTestCompile 'com.jayway.restassured:rest-assured'
    integrationTestCompile 'org.springframework.boot:spring-boot-starter-test:1.5.22.RELEASE'

    // custom hibernate-hikaricp version to use HikariCP 4.0
    integrationTestRuntime('org.hibernate:hibernate-hikaricp') {
        exclude group: 'org.javassist', module: 'javassist'
    }

    integrationTestRuntime 'ch.qos.reload4j:reload4j:1.2.25'
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    classpath += sourceSets.test.runtimeClasspath

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoIntegrationTest.exec")
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    // place the output of the QueryDSL predicate processor in a new location.
    def outputDir = file("$generatedSrcDir")
    outputs.dir outputDir
    doFirst {
        // make sure the directory exists.
        outputDir.exists() || outputDir.mkdirs()
    }

    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydsl

    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]

    // generated code goes into the generated code directory.
    destinationDir = outputDir

    dependencyCacheDir = compileJava.dependencyCacheDir

}

compileJava.dependsOn generateQueryDSL
compileJava.source generateQueryDSL.outputs.files, sourceSets.main.java

jacocoTestReport {
    executionData test, integrationTest

    sourceSets project.sourceSets.main

    reports {
        html.enabled = true
        xml.enabled = true
    }

    // remove auto-generated classes from report
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    'org/ow2/proactive/catalog/rest/entity/Q*',
                    'org/ow2/proactive/catalog/rest/query/parser/*']);
        })
    }
}

task updateWar(type: Zip, dependsOn: war) {
    def originalWar = file("build/libs/catalog-${version}.war")

    archiveName = "catalog-${version}.war"

    from(zipTree(originalWar)) {
        // Remove the original graphql jar if it exists
        exclude("**/WEB-INF/lib/graphql-java-17.6.jar")
    }

    // Include our own graphql jar
    from("$rootDir/lib/graphql-java-17.6.jar") {
        into('WEB-INF/lib/')
    }

    destinationDir file("${buildDir}/distributions")
}

task copyWar(type:Copy, dependsOn: updateWar) {
    // copy back the modified war into the libs folder
    from "${buildDir}/distributions/catalog-${version}.war"
    into "${buildDir}/libs"

}

build.dependsOn copyWar

clean {
    sourceSets.generated.java.srcDirs.each {
        srcDir -> delete srcDir
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

check.dependsOn integrationTest

jacocoTestReport.dependsOn check
tasks.coveralls.dependsOn jacocoTestReport

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

idea {
    module {
        testSourceDirs += file('src/integration-test/java')
        testSourceDirs += file('src/integration-test/resources')

        scopes.TEST.plus += [
                configurations.integrationTestCompile,
                configurations.integrationTestRuntime
        ]
    }
}

schema {
    query: Query
}

type Query {
    allCatalogObjects(where: CatalogObjectWhereArgs, orderBy: OrderByEnum, pageInfo: PageInfo): CatalogObjectConnection
}

enum OrderByEnum {
    catalogObjectKey_ASC
    catalogObjectKey_DESC
    kind_ASC
    kind_DESC
}

input CatalogObjectMetadataWhereArgs {
    key: String!
    value: StringWhereArgs!
}

input StringWhereArgs {
    like: String
    notLike: String
    eq: String
    ne: String
}

input CatalogObjectBucketNameWhereArgs{
     like: String
     notLike: String
     eq: String
     ne: String
}

input CatalogObjectKindWhereArgs{
    like: String
    notLike: String
    eq: String
    ne: String
}

input CatalogObjectContentTypeWhereArgs{
    like: String
    notLike: String
    eq: String
    ne: String
}

input CatalogObjectNameWhereArgs{
    like: String
    notLike: String
    eq: String
    ne: String
}

input CatalogObjectWhereArgs {
   AND: [CatalogObjectWhereArgs!]
   OR: [CatalogObjectWhereArgs!]
   bucketNameArg: CatalogObjectBucketNameWhereArgs
   nameArg: CatalogObjectNameWhereArgs
   kindArg: CatalogObjectKindWhereArgs
   contentTypeArg: CatalogObjectKindWhereArgs
   metadataArg: CatalogObjectMetadataWhereArgs
}

type CatalogObjectConnection {
    edges: [CatalogObject!]
    page: Int
    size: Int
    hasNext: Boolean
    hasPrevious: Boolean
    totalPage: Int
    totalCount: Int
}

input PageInfo {
    page: Int
    size: Int
}

type Metadata {
    key: String!
    value: String!
    label: String
}

type CatalogObject {
    commitDateTime: String!
    commitMessage: String
    contentType: String
    metadata: [Metadata!]
    kind: String!
    link: String
    bucketName: String!
    name: String!
}
